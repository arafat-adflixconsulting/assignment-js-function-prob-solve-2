/* 
Problem-01 : Train TT's Fine Calculator 

‚ö†Ô∏è Function Name Must be totalFine()

‡¶ü‡ßç‡¶∞‡ßá‡¶®‡ßá‡¶∞ ‡¶è‡¶ï‡¶ú‡¶® TT ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá‡¶® ‡¶∞‡¶¨‡¶ø‡¶®‡•§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶® ‡¶Ö‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø ‡¶Ø‡¶æ‡¶§‡ßç‡¶∞‡ßÄ ‡¶ü‡¶ø‡¶ï‡¶ø‡¶ü ‡¶π‡¶æ‡¶∞‡¶ø‡ßü‡ßá ‡¶´‡ßá‡¶≤‡ßá‡¶® ‡¶ï‡¶ø‡¶Ç‡¶¨‡¶æ ‡¶ï‡¶æ‡¶ü‡ßá‡¶® ‡¶á ‡¶®‡¶æ‡•§ ‡¶ü‡¶ø‡¶ï‡¶ø‡¶ü‡¶¨‡¶ø‡¶π‡ßÄ‡¶® ‡¶Ø‡¶æ‡¶§‡ßç‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶ú‡¶∞‡¶ø‡¶Æ‡¶æ‡¶®‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ó‡¶ø‡ßü‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¨‡¶æ‡¶∞ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßÅ‡¶≤‡ßá‡¶∂‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ö‡¶®‡ßá‡¶ï ‡¶∏‡¶Æ‡ßü ‡¶≤‡¶æ‡¶ó‡ßá‡•§ ‡¶§‡¶æ‡¶á TT ‡¶∞‡¶¨‡¶ø‡¶® ‡¶ö‡¶æ‡¶Ø‡¶º, ‡¶è‡¶Æ‡¶® ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ø‡¶æ‡¶§‡ßç‡¶∞‡ßÄ‡¶∞ ‡¶ü‡ßç‡¶∞‡ßá‡¶® ‡¶≠‡¶æ‡¶°‡¶º‡¶æ ‡¶¶‡¶ø‡¶≤‡ßá‡¶á ‡¶ú‡¶∞‡¶ø‡¶Æ‡¶æ‡¶®‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶ö‡¶≤‡ßá ‡¶Ü‡¶∏‡¶¨‡ßá‡•§ 
‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡¶æ‡¶∞ , ‡¶§‡¶æ‡¶á ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶∞‡¶¨‡¶ø‡¶® ‡¶∏‡¶æ‡¶π‡ßá‡¶¨‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø  totalFine ‡¶®‡¶æ‡¶Æ‡ßá ‡¶è‡¶ï‡¶ü‡¶æ function ‡¶§‡ßà‡¶∞‡ßÄ ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§  
‡¶Ø‡ßá‡¶ü‡¶æ fare ‡¶ï‡ßá ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶®‡ßá‡¶¨‡ßá‡•§  ‡¶è‡¶¨‡¶Ç fine ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßÅ‡¶≤‡ßá‡¶ü ‡¶ï‡¶∞‡ßá return ‡¶ï‡¶∞‡¶¨‡ßá‡•§ 

üßÆ ‡¶ú‡¶∞‡¶ø‡¶Æ‡¶æ‡¶®‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£‡ßá‡¶∞ ‡¶®‡¶ø‡ßü‡¶Æ:
‡¶Æ‡ßã‡¶ü ‡¶ú‡¶∞‡¶ø‡¶Æ‡¶æ‡¶®‡¶æ = ‡¶ü‡¶ø‡¶ï‡¶ø‡¶ü‡ßá‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶≠‡¶æ‡¶°‡¶º‡¶æ + (‡ß®‡ß¶% ‡¶∏‡¶æ‡¶∞‡¶ö‡¶æ‡¶∞‡ßç‡¶ú) + ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡ß©‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶ö‡¶æ‡¶∞‡ßç‡¶ú
 */

function totalFine(fare) {
  if (typeof fare !== "number" || fare <= 0) {
    return "Invalid";
  } else {
    const surcharge = fare * 0.2;
    const serviceCharge = 30;
    let fine = fare + surcharge + serviceCharge;
    return fine;
  }
}

let f = -150;
let vara = totalFine(f);
// console.log(vara);
// console.log(totalFine(200));

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

/* Problem-02 : Clean & Capitalize Characters

‚ö†Ô∏è Function Name Must be onlyCharacter()
‡¶∞‡¶æ‡¶´‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶â‡¶†‡¶§‡¶ø Ethical Hacker. üíª ‡¶∏‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶® ‡¶®‡¶æ‡¶®‡¶æ ‡¶ß‡¶∞‡¶£‡ßá‡¶∞ ‡¶è‡¶®‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü‡ßá‡¶° ‡¶§‡¶•‡ßç‡¶Ø ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡•§ ‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡¶è‡¶ï ‡¶Æ‡¶ø‡¶∂‡¶®‡ßá ‡¶∏‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡¶ø‡¶ï‡ßç‡¶∞‡ßá‡¶ü ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡ßü, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶§‡ßá ‡¶Æ‡¶æ‡¶ù‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ö‡¶®‡ßá‡¶ï ‡¶∏‡ßç‡¶™‡ßá‡¶∏, ‡¶õ‡ßã‡¶ü ‡¶π‡¶æ‡¶§‡ßá‡¶∞ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ , ‡¶¨‡ßú ‡¶π‡¶æ‡¶§‡ßá‡¶∞ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞  ‡¶è‡¶¨‡¶Ç ‡¶®‡¶æ‡¶®‡¶æ ‡¶∞‡¶ï‡¶Æ ‡¶ó‡ßç‡¶Ø‡¶æ‡¶™ ‡¶•‡¶æ‡¶ï‡ßá‡•§ ‡¶Ø‡¶æ ‡¶™‡ßú‡¶§‡ßá ‡¶¶‡ßÅ‡¶∞‡ßç‡¶≠‡ßá‡¶¶‡ßç‡¶Ø ‡¶≤‡¶æ‡¶ó‡ßá‡•§ 
‡¶∞‡¶æ‡¶´‡¶ø ‡¶ö‡¶æ‡ßü, ‡¶∏‡ßá ‡¶Ø‡ßá‡¶® ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã string ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ü‡ßÅ‡¶≤ ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá, ‡¶Ø‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞  ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶æ‡¶∞ ‡¶∞‡ßá‡¶ñ‡ßá ‡¶¨‡¶æ‡¶ï‡¶ø‡¶ü‡ßÅ‡¶ï‡ßÅ ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡¶¨‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶¨ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶™‡¶ø‡¶ü‡¶æ‡¶≤ ‡¶≤‡ßá‡¶ü‡¶æ‡¶∞‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡•§   
‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶π‡¶≤‡ßã ‡¶∞‡¶æ‡¶´‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø  onlyCharacter() ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ, ‡¶Ø‡¶æ ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ character ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∏‡ßá‡¶á character ‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶¨‡ßú ‡¶π‡¶æ‡¶§‡ßá‡¶∞ ‡¶∏‡¶Ç‡¶∏‡ßç‡¶ï‡¶∞‡¶£ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá‡•§ */

function onlyCharacter(str) {
  if (typeof str !== "string") {
    return "Invalid";
  } else {
    let isTrimed = str.trim();
    let spaceRemoved = isTrimed.replaceAll(" ", "");
    let accept = spaceRemoved.toUpperCase();
    return accept;
  }
}

// console.log(onlyCharacter("Cy   bar- At  tac k  "));

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

/* Problem-03 : FIFA Best Team Award 

‚ö†Ô∏è Function Name Must be bestTeam()
‡¶´‡ßÅ‡¶ü‡¶¨‡¶≤ ‡¶ñ‡ßá‡¶≤‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶†‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶ó‡ßã‡¶≤ ‡¶®‡ßü, ‡¶´‡¶æ‡¶â‡¶≤, ‡¶π‡¶≤‡ßÅ‡¶¶ ‡¶ï‡¶æ‡¶∞‡ßç‡¶°, ‡¶≤‡¶æ‡¶≤ ‡¶ï‡¶æ‡¶∞‡ßç‡¶°‡¶ì ‡¶ñ‡ßÅ‡¶¨ ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£! 
‡¶¶‡ßÅ‡¶á‡¶ü‡¶ø ‡¶¶‡¶≤ ‡¶ñ‡ßá‡¶≤‡ßá‡¶õ‡ßá‚Äî‡¶§‡¶æ‡¶∞‡¶æ ‡¶ï‡ßá ‡¶ï‡¶§ ‡¶´‡¶æ‡¶â‡¶≤ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá, ‡¶ï‡ßü‡¶ü‡¶æ ‡¶π‡¶≤‡ßÅ‡¶¶ ‡¶ï‡¶æ‡¶∞‡ßç‡¶° ‡¶ì ‡¶≤‡¶æ‡¶≤ ‡¶ï‡¶æ‡¶∞‡ßç‡¶° ‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßá ‡¶§‡¶æ ‡¶¶‡ßá‡¶ñ‡ßá ‡¶¨‡¶ø‡¶ö‡¶æ‡¶∞‡¶ï ‡¶†‡¶ø‡¶ï ‡¶ï‡¶∞‡¶¨‡ßá ‡¶ï‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶´‡ßá‡ßü‡¶æ‡¶∞ ‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡•§ 
‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã, ‡¶Ø‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶π‡¶¨‡ßá bestTeam(). 
‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶¶‡ßÅ‡¶á‡¶ü‡¶ø ‡¶¶‡¶≤‡ßá‡¶∞ ‡¶ñ‡ßá‡¶≤‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü (object ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá) ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶®‡ßá‡¶¨‡ßá ‡¶Ü‡¶∞ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá ‡¶∏‡ßá‡¶á ‡¶¶‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶Ø‡ßá ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶ï‡¶Æ ‡¶®‡¶ø‡ßü‡¶Æ ‡¶≠‡ßá‡¶ô‡ßá‡¶õ‡ßá ‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé ‡¶¨‡ßá‡¶∂‡¶ø ‡¶´‡ßá‡ßü‡¶æ‡¶∞ ‡¶õ‡¶ø‡¶≤‡•§  

üëâ ‡¶Ø‡ßá‡¶á ‡¶¶‡¶≤‡ßá‡¶∞  foul + redCard + yellowCard ‡¶è‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶®  ‡¶ï‡¶Æ ‚Üí ‡¶∏‡ßá‡¶á ‡¶¶‡¶≤ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶´‡ßá‡ßü‡¶æ‡¶∞
 */

function bestTeam(player1, player2) {
  if (typeof player1 !== "object" || typeof player2 !== "object") {
    return "Invalid";
  } else {
    let result1 = player1.foul + player1.cardY + player1.cardR;
    let result2 = player2.foul + player2.cardY + player2.cardR;
    if (result1 > result2) {
      return player2.name;
    } else if (result2 > result1) {
      return player1.name;
    } else if (result1 === result2) {
      return "Tie";
    }
  }
}

// console.log(
//   bestTeam({ name: "Germany", foul: 10, cardY: 1, cardR: 1 }, "France")
// );

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

/* Problem-04: Same Same But Different  üòï 

‚ö†Ô∏è Function Name Must be isSame()
- ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶π‡¶¨‡ßá isSame()‡•§ 
- ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶®‡ßá‡¶¨‡ßá, 
- ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶¨‡ßá ‚Äî ‡¶è‡¶á ‡¶¶‡ßÅ‡¶á‡¶ü‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá Same ‡¶ï‡¶ø‡¶®‡¶æ  
- ‡¶Ø‡¶¶‡¶ø ‡ß® ‡¶ü‡¶æ  Array ‡¶∏‡ßá‡¶á‡¶Æ ‡¶π‡ßü ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ü‡¶ø return ‡¶ï‡¶∞‡¶¨‡ßá true ‡•§  
- ‡¶Ü‡¶∞ ‡¶®‡¶æ ‡¶π‡¶≤‡ßá return ‡¶ï‡¶∞‡¶¨‡ßá false ‡•§
- ‡ß® ‡¶ü‡¶æ Array Same ‡¶π‡¶¨‡¶æ‡¶∞ ‡¶∂‡¶∞‡ßç‡¶§ - 
üö©Array ‡ß® ‡¶ü‡¶ø‡¶∞ length ‡¶∏‡¶Æ‡¶æ‡¶® ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§
üö©Array ‡ß® ‡¶ü‡¶ø‡¶∞  ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø index ‡¶è‡¶∞ value exactly  same ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§
 */

function isSame(arr1, arr2) {
  if (Array.isArray(arr1) !== true || Array.isArray(arr2) !== true) {
    return "Invalid";
  }

  if (arr1.length !== arr2.length) {
    return false;
  }
  for (let i = 0; i < arr1.length; i++) {
    if (arr1[i] !== arr2[i]) {
      return false;
    }
  }
  return true;
}

// console.log(isSame({ data: [2, 5, 6] }, [2, 5, 6]));

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

/* 
Problem-05: Exam Result Report Generator
‚ö†Ô∏è Function Name Must be resultReport()
‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá resultReport() ‡¶®‡¶æ‡¶Æ‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶π‡¶¨‡ßá , ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡ßá‡¶∞ Array ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶®‡ßá‡¶¨‡ßá (‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶è‡¶ï‡¶ú‡¶® student ‡¶è‡¶∞  ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡¶∏‡¶ó‡ßÅ‡¶≤‡ßã ‡¶•‡¶æ‡¶ï‡¶¨‡ßá) 
‡¶è‡¶¨‡¶Ç ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá ‡¶è‡¶ï‡¶ü‡¶ø object, ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßá ‡ß© ‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡ßã‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø ‚Äî
finalScore :  ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶ó‡ßú ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞  |  pass: ‡¶Æ‡ßã‡¶ü ‡¶ï‡ßü‡¶ü‡¶ø ‡¶¨‡¶ø‡¶∑‡ßü ‡¶™‡¶æ‡¶∏ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá  |  fail: ‡¶ï‡ßü‡¶ü‡¶ø ‡¶¨‡¶ø‡¶∑‡ßü ‡¶´‡ßá‡¶≤ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá
‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶§‡ßá ‡¶π‡¶¨‡ßá‡¶É  
üëâ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡¶æ‡¶¨‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡ßá ‡¶™‡¶æ‡¶∂ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï ‡¶π‡¶≤‡ßã  40 
üëâ finalScore ‡¶ï‡¶ñ‡¶®‡ßã ‡¶¶‡¶∂‡¶Æ‡¶ø‡¶ï ‡¶π‡¶¨‡ßá‡¶®‡¶æ‡•§ ‡¶è‡¶ü‡¶æ‡¶ï‡ßá rounded ‡¶ï‡¶∞‡ßá  ‡¶™‡ßÅ‡¶∞‡ßç‡¶® ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡ßü ‡¶∞‡ßÅ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§    

 */

function resultReport(marks) {
  if (Array.isArray(marks) !== true) {
    return "Invalid";
  }
  let sum = 0;
  let passMarks = [];
  let failMarks = [];
  for (let i = 0; i < marks.length; i++) {
    sum = sum + marks[i];
    if (marks[i] >= 40) {
      passMarks.push(marks[i]);
    } else {
      failMarks.push(marks[i]);
    }
  }

  if (marks.length === 0) {
    return { finalScore: 0, pass: 0, fail: 0 };
  }
  let avarageNumber = sum / marks.length;
  let finalScore = Math.round(avarageNumber);
  let pass = passMarks.length;
  let fail = failMarks.length;
  let result = { finalScore, pass, fail };
  return result;
}

console.log(resultReport(100));
